"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from minio import Minio
from pathlib import Path
from datetime import timedelta
from decouple import RepositoryEnv, Config, config
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)

ENV_FILE = BASE_DIR / config('ENV_PATH')
env_config = Config(RepositoryEnv(ENV_FILE))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',
    'channels',
    'rest_framework_swagger',
    'radius',
    'coreapi',
    'drf_yasg',
    'mscom'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'src.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['ui/build', 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'src.wsgi.application'
ASGI_APPLICATION = 'src.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('RADIUS_DEV_DB'),
        }
    },
    'admin': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('ADMIN_DB'),
        }
    },
    'radius': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('RADIUS_LIVE_DB'),
        }
    },
    'service': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('SERVICE_DB'),
        }
    },
    'customer': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('CUSTOMER_DB'),
        }
    },
    'helpdesk': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': env_config('HELPDESK_DB'),
        }
    },
    'network':{
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {
                'read_default_file': env_config('NETWORK_DB'),
            }
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    BASE_DIR / 'ui/build/static',
)






CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = (
#   'http://localhost:3000', 'https://dev.vbc.cloudtaru.com:7005'
# )
SIMPLE_JWT = {
    'SIGNING_KEY': env_config('JWT_SIGN_KEY')
}

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'radius.authentication.CacheAuthentication',
    ],

}

INTERNAL_IPS = [
    '127.0.0.1'
]

KAFKA_TOPIC = "micser-lead"
KAFKA_BROKER = env_config('KAFKA_BROKER')
KAFKA_TOPIC_BILLING = "micser-billing"

# DATABASE_ROUTERS = [
#     'radius.routers.AuthRouter',
# ]

# RabbitMQ as broker
# CELERY_BROKER_URL = 'amqp://localhost'
# Redis as broker
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_TIMEZONE = 'Asia/Kolkata'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_BEAT_SCHEDULE = {
    'one-hour-task': {
       'task': 'PeriodicWork',
       'schedule': 3600
    },
    'ten-min-task': {
       'task': 'expirytask',
       'schedule': 600
    },
    'daily-task': {
       'task': 'DailyTask',
       'schedule': 86400
    },
    'daily-6-task': {
       'task': 'RadiusFix',
       'schedule': 14400
    },
    'ten_minutes_tasks': {
       'task': 'DeletingstaticIp',
       'schedule': 86400
    },
    'ten_minutes_updatepayments_tasks': {
       'task': 'PendingPaymentsUpdation',
       'schedule': 86400
    }
}

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = env_config('EMAIL_HOST')
EMAIL_PORT = env_config('EMAIL_PORT')
EMAIL_HOST_USER = env_config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env_config('EMAIL_HOST_PASSWORD')
SERVER_EMAIL = EMAIL_HOST_USER

# EMAIL_HOST = "mail.vbctv.in"
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'ebill@vbctv.in'
# EMAIL_HOST_PASSWORD = 'ebill@123'

DOMAIN = env_config('DOMAIN')


# messaging api settings
# UNAME = '20170926'
# PASS = 'KH93sV6U'
# SEND = 'VBCINF'
UNAME = env_config('MESSAGING_API_USERNAME')
PASS = env_config('MESSAGING_API_PASSWORD')
SEND = env_config('MESSAGING_API_SEND')



# BulkSMS messaging api settings ##
SMS_API_ID = env_config('BULKSMS_API_ID')
SMS_API_PASSWORD = env_config('BULKSMS_API_PASSWORD')
SMS_API_SENDER = env_config('BULKSMS_API_SENDER')


# template id's for sms
CUSTOMER_EXPIRY_ALERT = env_config('CUSTOMER_EXPIRY_ALERT_TID')
DATA_CONSUMPTION_ALERT = env_config('DATA_CONSUMPTION_ALERT_TID')

# messages
CUSTOMER_EXPIRY_ALERT_MESSAGE = env_config('CUSTOMER_EXPIRY_ALERT_MESSAGE')
COMPLETE_DATA_CONSUMPTION_ALERT_MESSAGE = env_config('COMPLETE_DATA_CONSUMPTION_ALERT_MESSAGE')
PERCENT90_DATA_CONSUMPTION_ALERT_MESSAGE = env_config('PERCENT90_DATA_CONSUMPTION_ALERT_MESSAGE')
CUSTOMER_EXPIRY_ALERT_DAYS_MESSAGE=env_config('CUSTOMER_EXPIRY_ALERT_DAYS_MESSAGE')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CACHE_TTL = 86400*30*12
AUTH_USER_MODEL = 'radius.User'

ADMINS = [('Teja', 'dharmateja.k@cloudtaru.com'), ('Venu', 'venugopal.p@cloudtaru.com'), ('Rohith', 'rohith.r@cloudtaru.com'), ('Bhanu Prakash', 'bhanu.m@cloudtaru.com'), ('Srikanth', 'srikanth.b@cloudtaru.com'), ('Phani', 'phanikumar.v@cloudtaru.com')]
# MAILER_LIST = ['dharmateja.k@cloudtaru.com']
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'formatters': {
#             'verbose': {
#             'format': '%(levelname)s [%(asctime)s] %(module)s %(message)s'
#         },
#     },
#     'handlers': {
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler'
#         }
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['mail_admins'],
#             'propagate': True,
#             'level': 'DEBUG',
#         },
#     }
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': f'app_logs/vbclead_UTC_TZ.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
        },
    },
    'loggers': {
        'radius.views': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'radius.utility_2': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

RADIUS_CLUSTER_TZ = env_config('RADIUS_CLUSTER_TZ')
RADIUS_CLUSTER_HOSTNAME = env_config('RADIUS_CLUSTER_HOSTNAME')
RADIUS_CLUSTER_USERNAME = env_config('RADIUS_CLUSTER_USERNAME')
RADIUS_CLUSTER_PASSWORD = env_config('RADIUS_CLUSTER_PASSWORD')
RADIUS_CLUSTER_PORT = env_config('RADIUS_CLUSTER_PORT')

POD_RADIUS_CLUSTER_TZ = env_config('POD_RADIUS_CLUSTER_TZ')
POD_RADIUS_CLUSTER_HOSTNAME = env_config('POD_RADIUS_CLUSTER_HOSTNAME')
POD_RADIUS_CLUSTER_USERNAME = env_config('POD_RADIUS_CLUSTER_USERNAME')
POD_RADIUS_CLUSTER_PASSWORD = env_config('POD_RADIUS_CLUSTER_PASSWORD')
POD_RADIUS_CLUSTER_PORT = env_config('POD_RADIUS_CLUSTER_PORT')

BUCKET = env_config('BUCKET')
MINIO_DOMAIN = env_config('MINIO_DOMAIN')
MINIO_AK = env_config('MINIO_AK')
MINIO_SK = env_config('MINIO_SK')

CLIENT = Minio(
    MINIO_DOMAIN,
    access_key = MINIO_AK,
    secret_key = MINIO_SK,
    secure=True
)